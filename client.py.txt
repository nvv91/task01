import asyncio
import random
import datetime

class Client:
    def __init__(self, host='127.0.0.1', port=8888, client_id=1):
        self.host = host
        self.port = port
        self.client_id = client_id
        self.request_counter = 0
        self.log_file = open(f"client_{self.client_id}_log.txt", "a")

    async def send_ping(self, writer):
        while True:
            await asyncio.sleep(random.uniform(0.3, 3))
            request = f"[{self.request_counter}] PING\n"
            request_time = datetime.datetime.now()
            self.log_file.write(f"{request_time.strftime('%Y-%m-%d')};{request_time.strftime('%H:%M:%S.%f')[:-3]};{request.strip()};")
            writer.write(request.encode())
            await writer.drain()
            self.request_counter += 1

    async def receive_pong(self, reader):
        while True:
            try:
                data = await asyncio.wait_for(reader.readuntil(b'\n'), timeout=5)
                response_time = datetime.datetime.now()
                message = data.decode().strip()
                self.log_file.write(f"{response_time.strftime('%H:%M:%S.%f')[:-3]};{message}\n")
            except asyncio.TimeoutError:
                self.log_file.write(f"(таймаут)\n")

    async def run(self):
        reader, writer = await asyncio.open_connection(self.host, self.port)
        await asyncio.gather(self.send_ping(writer), self.receive_pong(reader))

async def main():
    clients = [Client(client_id=i) for i in range(1, 3)]
    await asyncio.gather(*(client.run() for client in clients))

if __name__ == "__main__":
    asyncio.run(main())